'use strict';

// Checks for certain os and filesystem conditions

var os = require('os');
var fs = require('fs');

var Conditions = {

  checkOs: function(test, result) {
    result = result === undefined ? true : result;
    return (os.platform() === test) === result;
  },

  checkExists: function(fileName, result) {
    result = result === undefined ? true : result;
    var accessible = true;
    try {
      fs.accessSync(fileName, fs.R_OK);
    } catch (err) {
      accessible = false;
    }
    return accessible === result;
  },

  checkEnv: function(variable, value) {
    var test = process.env[variable];
    return test === value;
  },

  checkCondition: function(op, val) {
    if(op === 'os') {
      return Conditions.checkOs(val);
    } else if(op === 'notos') {
      return Conditions.checkOs(val, false);
    } else if(op === 'exists') {
      return Conditions.checkExists(val);
    } else if(op === 'absent') {
      return Conditions.checkExists(val, false);
    } else if(op.indexOf('env:') === 0) {
      return Conditions.checkExists(op.split(':')[1], val);
    } else if(op.indexOf('nenv:') === 0) {
      return !Conditions.checkExists(op.split(':')[1], val);
    }
  },

  // @param conditions -- an array of [op, val] pairs
  // @param onFail -- a function(op, val) called on failure
  checkAll: function(conditions, onFail) {
    // check all conditions
    for (var c=0; c<conditions.length; c++) {
      if (!Conditions.checkCondition.apply(null, conditions[c])) {
        // failed a condition
        onFail(conditions[c][0], conditions[c][1]);
      }
    }
  },

  // @param conditions -- an array of [op, val] pairs
  // @param onFail -- a function() called on failure
  checkAny: function(conditions, onFail) {
    // check all conditions
    for (var c=0; c<conditions.length; c++) {
      if (Conditions.checkCondition.apply(null, conditions[c])) {
        return;
      }
    }
    // failed all conditions
    onFail();
  }

}

module.exports = Conditions;
