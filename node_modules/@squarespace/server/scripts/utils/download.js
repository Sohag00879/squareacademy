'use strict';

// Downloads a resource, and places it in a destination folder
// unzipping and untarring in the process.

var fs = require('fs');
var path = require('path');
var zlib = require('zlib');
var urllib = require('url');
const got = require('got');
const { CookieJar } = require('tough-cookie');

var mkdirp = require('mkdirp');
var tar = require('tar-fs')

function doStream(url, input, output) {
  return new Promise(function (resolve, reject) {
    let totalBytes = 0;

    input.on('data', (chunk) => {
      totalBytes += chunk.length;
    });

    input.on('error', (err) => {
      console.error(`Error downloading from ${url}:`, err);
      reject(err);
    });

    const pipe = input.pipe(output);

    pipe.on('error', (err) => {
      console.error(`Error piping stream for ${url}:`, err);
      reject(err);
    });

    output.on('finish', () => { // Listen for 'finish' on the output stream
      console.log(`Downloaded ${totalBytes} bytes from ${url}`);
      resolve();
    });

    output.on('error', (err) => {
      console.error(`Error writing to output stream for ${url}:`, err);
      reject(err);
    });
  });
}

module.exports = function(url, destination, untar, unzip, headers) {

  if (untar || unzip) {
    mkdirp.sync(destination);
  }

  const cookieJar = new CookieJar();

  const gotOptions = {
    headers,
    cookieJar,
    followRedirect: true
  };

  const cookieString = headers['Cookie'];
  const parsedUrlObj = new URL(url);
  cookieJar.setCookieSync(cookieString, parsedUrlObj);

  var inputStream = got.stream(url, gotOptions);

  if (unzip) {
    inputStream = inputStream.pipe(zlib.Unzip());
  }

  var outputStream;
  if (untar || unzip) {
    outputStream = tar.extract(destination);
  } else {
    var outputName = path.basename(urllib.parse(url).pathname)
    outputStream = fs.createWriteStream(path.join(destination, outputName));
  }

  return doStream(url, inputStream, outputStream);
};
