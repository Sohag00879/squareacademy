'use strict';

// Generates urls of the form:
// [BASEURL]/[version]-b[build]/jre-[version]-[platform]-[arch].tar.gz
// example:
// http://download.oracle.com/otn-pub/java/jdk/8u92-b13/jre-8u92-macosx-x64.tar.gz
// http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jre-8u131-macosx-x64.tar.gz
// parameters:
//   platform: String
//   arch: String
//   version: (optional) partial or full version string. Ex: 8, 8u92
// returns:
//   url or null if no valid combination of platform, arch and version exists

var BASEURL = "http://download.oracle.com/otn-pub/java/jdk/";

// Builds are [version, revision, build]
var BUILDS = require('../resources/jre-versions.json');

function toJrePlatform(plat) {
  return {"darwin": "macosx", "win32": "windows"}[plat] || plat;
}



function getVersion(plat, arch, ver) {
  var parts = ver ? ver.split('u') : [];
  var major = parts.length > 0 ? parts[0] : ver;
  var minor = parts.length > 1 ? parts[1] : undefined;
  var versions;
  try {
    versions = BUILDS[plat][arch];
  } catch (TypeError) {
    return null;
  }

  if (!versions) {
    return null;
  }

  var sortedVersions = versions.sort().reverse();
  for (var v = 0; v < sortedVersions.length; v++) {
    if (major && major != sortedVersions[v][0]) continue;
    if (minor && minor != sortedVersions[v][1]) continue;
    return sortedVersions[v];
  }
  return null;
}

module.exports = function (platform, arch, version) {
  var JRE_OVERRIDE_URL = process.env.JRE_OVERRIDE_URL;
  if (JRE_OVERRIDE_URL) {
    return JRE_OVERRIDE_URL;
  }
  var jrePlat = toJrePlatform(platform);
  var ver = getVersion(jrePlat, arch, version);
  if (!ver) return null;
  var verStr = '' + ver[0] + 'u' + ver[1];
  var pathStr = verStr + '-b' + ver[2] + '/' + ver[3] + '/';
  var filename = ['jre', verStr, jrePlat, arch + '.tar.gz'].join('-');
  return BASEURL + pathStr + filename;
};